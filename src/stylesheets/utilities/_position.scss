// Common values
$positions: (
  static: static,
  rel: relative,
  abs: absolute,
  fixed: fixed,
  sticky: sticky,
);

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $abbr, $position in $positions {
      .p#{$infix}-#{$abbr} {
        @if ($abbr == 'sticky') {
          position: -webkit-sticky;
        }

        position: $position;
      }
    }
  }
}

// Shorthand

.fixed-top {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  z-index: $zindex-fixed;
}

.fixed-bottom {
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: $zindex-fixed;
}

.sticky-top {
  @supports (position: sticky) {
    position: sticky;
    top: 0;
    z-index: $zindex-sticky;
  }
}

@for $i from 1 through 21 {
  .z-index-#{$i} {
    z-index: $i;
  }
}

@each $key,
  $value
    in (
      'dropdown': $zindex-dropdown,
      'sticky': $zindex-sticky,
      'fixed': $zindex-fixed,
      'modal-backdrop': $zindex-modal-backdrop,
      'modal': $zindex-modal,
      'popover': $zindex-popover,
      'tooltip': $zindex-tooltip,
      'loading': $zindex-loading
    )
{
  .z-index-#{$key} {
    z-index: $value;
  }
}

.p-abs,
.p-fixed,
.p-sticky {
  &.top-right {
    top: 0;
    right: 0;
  }

  &.bottom-right {
    bottom: 0;
    right: 0;
  }

  &.top-left {
    top: 0;
    left: 0;
  }

  &.bottom-left {
    bottom: 0;
    left: 0;
  }

  &.centered {
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }

  &.centered-left {
    left: 0;
    top: 50%;
    transform: translate(0, -50%);
  }

  &.centered-right {
    right: 0;
    top: 50%;
    transform: translate(0, -50%);
  }

  &.centered-top {
    left: 50%;
    top: 0;
    transform: translate(-50%, 0);
  }

  &.centered-bottom {
    left: 50%;
    bottom: 0;
    transform: translate(-50%, 0);
  }
}
